Infrastructure Customizations

* Environment Settings

  The most likely thing you will want to customize is the location of the database.  
  Spring Batch Admin ships with an embedded HSQLDB database, which is initialized on
  start up.
  
    * To change the database type add a file to the application classpath called 
    <<<batch-[type].properties>>>, where <<<[type]>>> is the database type you want to use.
    Copy the contents of the <<<batch-hsql.properties>>> from the Manager jar and change the values
    to suit your environment.  Then launch the application with a system property 
    <<<-Dorg.springframework.batch.support.SystemPropertyInitializer.ENVIRONMENT=[type]>>>.
    
    * To stop the database from being 
    wiped and re-created just set <<<batch.data.source.init=false>>>
    (in the properties file or as a System property). 

* Overriding Components from Spring Batch Admin

  The system tries to provide some useful defaults for things like transaction manager,
  job repository, job registry etc.  Most of these live in the manager jar in
  a special place: <<<META-INF/bootstrap>>>.  If you want to
  override them, just add your own versions of the same bean definitions to a
  Spring XML config file in <<<META-INF/spring>>> (these are guaranteed to load 
  after the bootstrap files, so they can override default definitions).  You could
  use this to override the data source definition as an alternative to the environment
  settings described above. 

* Create your own Web Application

  Hints for custom applications:
  
    * Look at the sample.
    
    * Create a war project with an index.jsp and a web.xml (from the sample or from 
    the <<<spring-batch-admin-resources.jar>>>).
    
    * Include the <<<spring-batch-admin-*.jar>>> files in <<<WEB-INF/lib>>>.  In the sample this is done simply by 
    making the WAR depend on those jar files in the Maven pom.
    
    * Deploy the web app. 
